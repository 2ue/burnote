# Burnote 一体化部署 Dockerfile - 多阶段构建
# 只复制构建产物,不包含源码和dev依赖

# ============================================
# Stage 1: 构建后端
# ============================================
FROM node:20-alpine AS backend-builder

WORKDIR /app

# 复制package文件和prisma
COPY backend/package*.json ./
COPY backend/prisma ./prisma/

# 安装依赖
RUN npm install

# 复制源代码
COPY backend/src ./src/
COPY backend/tsconfig*.json ./

# 生成Prisma客户端并构建
RUN npx prisma generate && npm run build

# ============================================
# Stage 2: 构建前端
# ============================================
FROM node:20-alpine AS frontend-builder

WORKDIR /app

# 复制package文件
COPY frontend/package*.json ./

# 安装依赖
RUN npm install

# 复制源代码和配置
COPY frontend/ ./

# 构建
RUN npm run build

# ============================================
# Stage 3: 生产运行时 - nginx + node
# ============================================
FROM nginx:alpine

# 安装node运行时
RUN apk add --no-cache nodejs npm

WORKDIR /app

# 从后端构建阶段复制必要文件
COPY --from=backend-builder /app/dist ./dist
COPY --from=backend-builder /app/package*.json ./
COPY --from=backend-builder /app/prisma ./prisma/

# 安装后端生产依赖并生成Prisma客户端
RUN npm install --production && \
    npx prisma generate

# 从前端构建阶段复制静态文件到nginx
COPY --from=frontend-builder /app/dist /usr/share/nginx/html

# 复制nginx配置和启动脚本
COPY nginx.standalone.conf /etc/nginx/conf.d/default.conf
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# 创建数据目录
RUN mkdir -p /app/data

# 暴露端口
EXPOSE 3500

# 启动脚本
ENTRYPOINT ["/docker-entrypoint.sh"]
